#WEEK 3 NOTES

#MON

#NOW WE KNOW GAME 
- set a timer for 60 sec
- within that time shoutout something you know or aquired.

How to colone repo 
SELECT and FROM 
Terminal workflow
Creating repos
Joins
Defaults (Order By asc,)
Working wiht concat
Aggregate functions (count, min, max)
How to use git ignore files

#I think I got it but not too sure about.

Creating tables in SQL
    - will be creating tables from quarries later
    - create temp. tables
    - The table cration syntx and comands we see when we run  Lookat table info in sql pro or SHOW CREATE TABLE cammand.

        #Synatx for table 
        CREAT TBALE table name (column name, data type) any Modifiers.

Distinct vs groupby
    -distinct select the distinct values within a table value ie first_name.
        
        #Example 

        USE employees
        SELECT distinct `first_name`
        FROM employees
        WHERE gender in ("m");

working with time in mySQL 
Knowing when to use Where and Having 
Formatting quarries 
Use group by when useing count
Select statements in select statements
    - We can not use multiple columes when using select and groupby because the group by function is working on a single column and is too much infromation to draw multiple columns.
    - whe using group by we are changing and redefining our level of observation. (Changin the definition of what we are observing)

        #Example

        USE employees
        SELECT (first_name), count(*)
        FROM employees
        group by first_name; #Could be more than one employees with that first name

    - Use count to show the number of duplicates.
    - Group by allows us to use aggregate finctions on each group. Dont need group by to run agg functions on a list. 
    - Group by allows us to narrow down our agg functions on definde variables.

#Relationships

#Indexes (Indices)
- optimize queries and ensure integrity of data
- Primary keys
- Unique  indexes 
    - are not limited to 1 per table
    - unique indexes are use to make sure there are no duplicates within a column.
- Alter statement
    - used to update the table

#Foreign Keys
    - another table's primary key

#Multiple Column Indexes

#Joins
- inner join (join) 
- left join 
- right join 
    
    #Example of join 

    SELECT 
    FROM table_a
    JOIN table_b AS B ON A.id = B.fk_id;

    #Show all the titles that each employee has had over time.
    
    Select * 
    From employees
    JOIN titles ON employees.emp_no = titles.emp_no;

    #How many titles has each employee had?

    Select employees.emp_no, count(*)
    From employees
    JOIN titles ON employees.emp_no = titles.emp_no
    group by emp_no;

    #IF we have a foreign key and primary key with identical name we can do the following.

    Select *
    From employees
    JOIN titles using(emp_no);
    
    #This way give you two emp_no columns.
    
    Select *
    From employees
    join titles ON employees.emp_no = titles.emp_no;

#Relationship types 
- One to Many (many diffrent rows associated with a single row on another)
    -(one employee could have many titles)(foreign key points to the one table)

- Many to Many (many different rows on a table related to many diffrent rows on another table)
    -(one employee could belong to multiple departments (over time) )
        - when we have a table with multple forigne keys it is likely to be a many to many table
        - can A have more than one B?
        
- One to One 
    -(relationship between a usernameand and a password)(expressed a diffrent columns on the same table)

##More Joins

Types of joins

    #Inner join is a logical AND statment. Not tolerating any nulls.
    
    Select *
    From users
    join roles on users.role_id = role_id;

    #Left joins (Tolerates nulls) Takes from the left or the Users side.(All of records you star with. (gives all users)
    
    Select *
    From users 
    left join roles on users.role_id = role_id;


    #Right joins (keeps any records from table B that have any nulls) (gives all roles)
    
    Select *
    From users 
    Right join roles on role_id = users.role_id;

    #Multiple Joins (Write a quarry that shows the current salry for all current employees)

    Use employees;

    Select *
    From employees
    Join salaries On salaries.emp_no = employees.emp_no
    Where salaries.to_date > curdate();


    Select *
    From employees
    join dept_emp on dept_emp.emp_no = employees.emp_no
    join departments on dept_emp.dept_no = departments.dept_no
    Where dept_emp.to_date > curdate();

#The number of joins is the number of tables * 1
 #One to many has 2 tables meqns 2 joins 
   #Many to many has 3 tables meaing 2 joins

    #Write a quarry that returns the employee name, department name, and their current salary.

    Select first_name, last_name, salary, departments.dept_name, dept_emp.to_date as "Depatment_to_date", salaries.to_date as "Salary_to_date" 
    From employees
    join dept_emp on dept_emp.emp_no = employees.emp_no
    join departments on dept_emp.dept_no = departments.dept_no
    join salaries on salaries.emp_no = employees.emp_no
    Where dept_emp.to_date > curdate()
    AND salaries.to_date > curdate();   

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#10 Bonus Find the names of all current employees, their department name, and their current managers name.

#Manifest of tables
#list out all the tables we need
- employees table
- deapartments table
- dept_emp
- dept_manager


Select concat(employees.first_name," ", employees.last_name) as "Employee Name", 
dept_name, dept_manager.emp_no,
concat(managers.first_name," ", managers.last_name)
from employees 
join dept_emp using(emp_no)
join departments using(dept_no)
join dept_manager using(dept_no)
join employees as managers on managers.emp_no = dept_manager.emp_no
Where dept_manager.to_date > curdate()
and dept_emp.to_date > curdate()
Order by dept_name;


#11 Bonus Who is the highest paid employee within each department.

select first_name, last_name, salary, dept_name
from employees
join salaries on salaries.emp_no = employees.emp_no
join dept_emp on dept_emp.emp_no = employees.emp_no
join departments on departments.dept_no = dept_emp.dept_no
where salary in (
	Select max(salary)
	from employees
	join salaries on salaries.emp_no = employees.emp_no
	join dept_emp on dept_emp.emp_no = employees.emp_no
	join departments on departments.dept_no = dept_emp.dept_no
	group by dept_name
)
And salaries.to_date > curdate()
And dept_emp.to_date > curdate();

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#TUE#

#Sub Querys

# If we have 3 specific numbers, we can use OR 

Use employees;

select *
from employees
where emp_no = ()
or = ()
or = ()
or = ();


#IF we have a list of specific numbers, we can use IN ()

select *
from employees
where emp_no in (select 
		column_a
		from Table_b);
		
# Joins allowed uis to stich together tables based on keys...
# Joins are darn fast 
Select *
from employees
where emp_no in (
		select emp_no
		from dept_manager
		where to_date > curdate()
)
AND gender = "f";

#Also 

Select *
from employees
where emp_no > (
		select emp_no 
		From dept_manager
		where to_date > curdate()
);

#opperator can change (Not IN, =, >, <)
Select *
from employees
where emp_no Not In (
		select emp_no 
		From dept_manager
		where to_date > curdate()
);

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 #6) How many current salaries are within 1 standard deviation of the current highest salary? (Hint: you can use a built in function to calculate the standard deviation.) 
 What percentage of all salaries is this?
 
select
 (Select count(salary)
 from salaries 
 where salary > (
 		Select 
 		max(salary) - STDDEV(salary)
 		from salaries
 	    Where to_date > curdate())
 AND to_date > curdate())
 /
 (select
 count(salary)
 from salaries
 Where to_date > curdate())
 *100;
 
#0.0346 
#Percentage of all current salaries that are within one standard deviation of the current max salary" 

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#WED (Numbers without context are meaningless)

#Temporary Tables 
- CREATE TEMPORARY TABLE table_name(...);

(6-7 Tuesday nights (Sara Pena) (Mentor/Toutor)(on Zoom)
Zoom Link = https://us02web.zoom.us/j/83760881630?pwd=U0ZNM3VXU2lGYmdBSml2eVBnZWw4QT09) 

-Use employees;

#Create a Temporary table (n is column name) (Unsigned Not Null are the modifiers)
CREATE TEMPORARY TABLE my_numbers(
    n INT UNSIGNED NOT NULL 
);

#Create a Permanent table
CREATE TABLE my_numbers(
    n INT UNSIGNED NOT NULL 
);

#Must use this database to make temp tabes
Use easley_1272;

#This is the quarey that we want to put itno the temp table
select 1, 2, 3, 4, 5 * 12;

#Quary and table mixed together
Use easley_1272;

CREATE TEMPORARY TABLE numbers as (
    select 1, 2, 3, 4, 5 * 12
);
select * from numbers;

#Modifying temp tables (Updating temp table)
DATE my_numbers SET n = n + 1;

#Examples
CREATE TEMPORARY TABLE my_numbers1(
	n INT UNSIGNED NOT NULL 
);

INSERT INTO my_numbers1(n) VALUES (1), (2), (3), (4), (5);

select * 
from my_numbers1;

update my_numbers1
set n = 503
where n = 5; # using the where clause to isolate specific 

select * 
from my_numbers1;

#(deleteing values from temp table)
DELETE FROM my_numbers1 WHERE n % 2 = 0; # where n = even numbers are deleted

select * 
from my_numbers1;

#When doing temp tables 
#Satrt by using your own database (so you ca write/edit/delete/whatever)

#Step 1
#start 
#use easley database
Use easley_1272;

#Step 2
#lets make a temp table of current employees w/ their salary
select *
from employees.employees # database_name.table_name
join employees.salaries using(emp_no) # database_name.table_name
where to_date > curdate();

#Step 3
#Wrap up quarey in temp table
create temporary table emp_salary as (
	select *
	from employees.employees # database_name.table_name
	join employees.salaries using(emp_no) # database_name.table_name
	where to_date > curdate()
);

#Step 4 
#show temp table to edit (will not touch source data)
select *
from emp_salary;
#AFTER WE HAVE A TEMP TABLE WHERE WE CAN QUERY FROM IT OR ALTER DATA WHEN NEEDED 

#Stakeholders say:
#What would our total slary be if everybody got a 5% rasie?
#example of when to use a temp table.

update emp_salary
set salary = salary + salary * .05;

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#THU (Case Statements)

Use employees;

#Create a Temporary table (n is column name) (Unsigned Not Null are the modifiers)
CREATE TEMPORARY TABLE my_numbers(
    n INT UNSIGNED NOT NULL 
);

#Create a Permanent table
CREATE TABLE my_numbers(
    n INT UNSIGNED NOT NULL 
);

#Must use this database to make temp tabes
Use easley_1272;

#This is the quarey that we want to put itno the temp table
select 1, 2, 3, 4, 5 * 12;

#Quary and table mixed together
Use easley_1272;

CREATE TEMPORARY TABLE numbers as (
    select 1, 2, 3, 4, 5 * 12
);
select * from numbers;

#Modifying temp tables (Updating temp table)
DATE my_numbers SET n = n + 1;

#Examples
CREATE TEMPORARY TABLE my_numbers1(
	n INT UNSIGNED NOT NULL 
);

INSERT INTO my_numbers1(n) VALUES (1), (2), (3), (4), (5);

select * 
from my_numbers1;

update my_numbers1
set n = 503
where n = 5; # using the where clause to isolate specific 

select * 
from my_numbers1;

#(deleteing values from temp table)
DELETE FROM my_numbers1 WHERE n % 2 = 0; # where n = even numbers are deleted

select * 
from my_numbers1;

#When doing temp tables 
#Satrt by using your own database (so you ca write/edit/delete/whatever)

#Step 1
#start 
#use easley database
Use easley_1272;

#Step 2
#lets make a temp table of current employees w/ their salary
select *
from employees.employees # database_name.table_name
join employees.salaries using(emp_no) # database_name.table_name
where to_date > curdate();

#Step 3
#Wrap up quarey in temp table
create temporary table emp_salary as (
	select *
	from employees.employees # database_name.table_name
	join employees.salaries using(emp_no) # database_name.table_name
	where to_date > curdate()
);

#Step 4 
#show temp table to edit (will not touch source data)
select *
from emp_salary;
#AFTER WE HAVE A TEMP TABLE WHERE WE CAN QUERY FROM IT OR ALTER DATA WHEN NEEDED 

#Stakeholders say:
#What would our total slary be if everybody got a 5% rasie?
#example of when to use a temp table.
update emp_salary
set salary = salary + salary * .05;


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

USE easley_1272;

#1) Using the example from the lesson, re-create the employees_with_departments table
CREATE TEMPORARY TABLE employees_with_departments AS (
		SELECT emp_no, first_name, last_name, dept_no, dept_name
		FROM employees.employees
		JOIN employees.dept_emp USING(emp_no)
		JOIN employees.departments USING(dept_no)
		LIMIT 100);
		
Select *
from employees_with_departments;

#A) Add a column named full_name to this table. It should be a VARCHAR whose length is the sum 		of the lengths of the first name and last name columns
    
Alter Table employees_with_departments add full_name Varchar(30);

Select *
from employees_with_departments;

#B) Update the table so that full name column contains the correct data

Update employees_with_departments 
set full_name = concat(first_name," ", last_name);

Select *
from employees_with_departments;

#C) Remove the first_name and last_name columns from the table.
Alter table employees_with_departments
Drop column first_name;

Alter table employees_with_departments
Drop column last_name;

Select *
from employees_with_departments;

#D) What is another way you could have ended up with this same table?
use easley_1272;

CREATE TEMPORARY TABLE employees_with_departments1 AS (
		SELECT emp_no, concat(first_name," ", last_name) as "Full Name", dept_no, dept_name
		FROM employees.employees
		JOIN employees.dept_emp USING(emp_no)
		JOIN employees.departments USING(dept_no)
		LIMIT 100);

Select *
from employees_with_departments1;

#IDK

Alter Table employees_with_departments1 add full_name Varchar(30);

Update employees_with_departments1 
set full_name = concat(first_name," ", last_name)

Alter table employees_with_departments1
Drop column first_name;

Alter table employees_with_departments1
Drop column last_name;


#2) Create a temporary table based on the payment table from the sakila database.

USE easley_1272;

CREATE TEMPORARY TABLE payment4 AS
    (SELECT * 
    FROM sakila.payment);

#Write the SQL necessary to transform the amount column such that it is stored as an integer 	representing the number of cents of the payment. For example, 1.99 should become 199.
    
SELECT *
FROM payment4;

ALTER TABLE payment4 ADD new_amount INT;

SELECT * 
FROM payment4;

UPDATE payment4 
SET new_amount = amount * 100;

SELECT *
FROM payment4;

ALTER TABLE payment4 
DROP COLUMN amount;

SELECT * 
FROM payment4;

ALTER TABLE payment4 
CHANGE COLUMN new_amount amount int;

SELECT *
from payment4;

