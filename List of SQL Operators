#ALL 	TRUE if all of the subquery values meet the condition 	
#AND 	TRUE if all the conditions separated by AND is TRUE 	
#ANY 	TRUE if any of the subquery values meet the condition 	
#BETWEEN 	TRUE if the operand is within the range of comparisons 	
#EXISTS 	TRUE if the subquery returns one or more records 	
#IN 	TRUE if the operand is equal to one of a list of expressions 	
#LIKE 	TRUE if the operand matches a pattern 	
#NOT 	Displays a record if the condition(s) is NOT TRUE 	
#OR 	TRUE if any of the conditions separated by OR is TRUE 	
#SOME 	TRUE if any of the subquery values meet the condition

#EX of Having Operator

SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
HAVING condition
ORDER BY column_name(s);

#Join Syntax

SELECT columns
FROM table_a as A
JOIN table_b as B ON A.id = B.fk_id;

#Ex) 

CREATE TABLE roles (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT, #Genrates the table columns roles.
  name VARCHAR(100) NOT NULL,
  PRIMARY KEY (id)
);

CREATE TABLE users (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT, #genrates table columns users.
  name VARCHAR(100) NOT NULL,
  email VARCHAR(100) NOT NULL,
  role_id INT UNSIGNED DEFAULT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (role_id) REFERENCES roles (id)
);

INSERT INTO roles (name) VALUES ('admin');
INSERT INTO roles (name) VALUES ('author');
INSERT INTO roles (name) VALUES ('reviewer');
INSERT INTO roles (name) VALUES ('commenter');

INSERT INTO users (name, email, role_id) VALUES
('bob', 'bob@example.com', 1),
('joe', 'joe@example.com', 2),
('sally', 'sally@example.com', 3),
('adam', 'adam@example.com', 3),
('jane', 'jane@example.com', null),
('mike', 'mike@example.com', null);
