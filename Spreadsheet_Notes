Use Cases

    You need to deliver a dataset and/or report specifically in spreadsheet format (Excel, Google Sheets, e.g.).
    Someone wants to see your analysis and be able to explore the data themselves, and they need to use Excel or Google Sheets to do so.
    You are working on a report that is going to be done in Powerpoint/Google Slides and the data that creates the charts and tables need to accompany it.
    You are working on a collaborative presentation or report and the others are using Excel or Google Sheets to create the charts and reference the data.
    You receive a workbook in Excel or Google Sheets and need to take a look at it, make changes, and deliver back to original author.
    You have a small dataset and need to answer a quick, one-time question.

Limitations of Spreadsheets

    Limitations in amount of data, e.g. Excel is limited to 16,384 Columns & 1,048,576 million rows.
    Excel use a lot of RAM!
    Time Consuming: manually entering data, not simple to automate basic tasks.
    Security issues, e.g. viruses are often attached to Excel files that can be executed through macros.
    Limited types of charts and data must fit into the existing frameworks and formats of the charts available.
    Analyzing data: As the data grows and emerge over time the analysis must be re-run.
    Analyzing data: The data and the formulas are not consistently updated often leading to bad results and decisions.
    Achieving reproducibility is almost impossible.
    Excel & Google Sheets mix the data with the code, leading to duplicate effort in running same code on different data.
    There is no way to modularize the code.
    It is difficult to see what's going on the background, hard to see which cells are formula vs. raw data.
    Hard to debug: no error messages, or a few with no specifics.
    Easy to mess up your data permanently without realizing it.
    Version control & collaboration: what's that?
    "For the science in data science this isn't good." -Zach

Benefits of Spreadsheets

    Small learning curve
    Good for organizing point in time data to deliver to others to explore who don't have experience with programming or SQL
    Faster for some applications where you know the maximal scope of the project is going to be small. You have a well defined upper bound on the complexity of the problem. Although that is rarely the case...even when it is claimed to be in the beginning.

Skills Covered in Prework

    Entering data
    Worksheet structure
    Entering a formula
    Copy and paste: CTRL-C/CTRL-V, fill handle
    Relative reference in functions
    Formatting: cells, font, alignment, data formats, borders, copy and paste formats with format painter.
    Filtering and sorting data
    Insert/delete rows and columns
    Auto-sum, average, count...
    Functions: SUM(), *, +, IF(), VLOOKUP()
    Insert Table, name the table, add totals
    Remove duplicates
    Pivot Table
    Create a chart

Exercises

Use the Spreadsheets_Exercises.xlsx workbook to do exercises. You will use this workbook throughout the spreadsheets lessons. You will do the work Google Sheets.

    Read through Data Organization in Spreadsheets for spreadsheet best practices.
    Copy Table1_Customer_Details into a new worksheet, mytable_customer_details.
    Compute monthly tenure.
    Ensure the data format of each field is appropriate for data contained.
    Remove duplicate customer_id's.
    Save your notebook to continue in next lesson.

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Functions

    Excel refers to these as formulas, Google Sheets refers to them as functions

Categories of functions include:

    Most recently used
    Financial
    Logical
    Text
    Date & Time
    Lookup & Reference
    Math & Trig
    Statistical
    Engineering
    Information

Logical

    =IF(logical_test, value_if_true, value_if_false)

    Comparison operators: =, >, <, >=, <=, <>

    Comparison Functions:
        =ISNA()
        =ISNUMBER()
        =ISTEXT()
        =ISBLANK()
        =ISNONTEXT()
        =ISLOGICAL()

    =IFERROR(A3/B3, .00001): if =A3/B3 results in an error (e.g. if B3 = 0), return .00001 instead of the error.

Text

    FIND("!", mytext): Find the '!' in mytext and return the number of characters it is from the start of the string.

    LEN(mytext): Number of characters in mytext.

    =SUBSTITUTE(mytext, "!", "?"): Replace any "!" with "?" in mytext.

    =VALUE("6"): Converts a number that is being stored as text to a number.

    =TRIM(mytext): Remove any leading or trailing whitespaces like the one leading this phrase.

    Split text into multiple cells: Data -> Text to Columns

    =CONCAT("H","e","l","l","o"): Merge text from multiple cells into a single cell with no defined delimeter. "Hello"

    =mytext & " I think...": Concatenate text using '&'...You can merge both cell references and constant strings. " Caught you smiling! I think..."

    =TEXTJOIN(delimeter="-", ignore_empty=TRUE, "210", "867", "5309"): Place the delimeter between each string of text upon concatenation. "210-867-5309"

    =LEFT(mytext, 3): Return the first 3 characters from the left.

    =RIGHT(mytext, 3): Return the first 3 characters from the right.

    =MID(mytext, 2, 3): Return the first 3 characters from the left, starting at character 2, so basically return characters 2, 3, & 4.

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Lookup and Reference
VLOOKUP: Vertical Lookup

Looks for a value in the leftmost column of a table, and then returns a value in the same row from a column you specify. By default, the table must be sorted in an ascending order.

=VLOOKUP(lookup_value,table_array,col_index_num,range_lookup)

    Lookup_value: is the value to be found in the first column of the table, and can be a value, a reference, or a text string.

    Table_array: is a table of text, numbers, or logical values, in which data is retrieved. Table_array can be a reference to a range or a range name.

    Col_index_num: is the column number in table_array from which the matching value should be returned. The first column of values in the table is column 1.

    Range_lookup: is a logical value: to find the closest match in the first column (sorted in ascending order) = TRUE or omitted; find an exact match = FALSE.

HLOOKUP: Horizontal Lookup

Looks for a value in the top row of a table or array of values and returns the value in the same column from a row you specify.

=HLOOKUP(lookup_value,table_array,row_index_num,range_lookup)

    Lookup_value: is the value to be found in the first row of the table and can be a value, a reference, or a text string.

    Table_array: is a table of text, numbers, or logical values in which data is looked up. Table_array can be a reference to a range or a range name.

    Row_index_num: is the row number in table_array from which the matching value should be returned. The first row of values in the table is row 1.

    Range_lookup: is a logical value: to find the closest match in the top row (sorted in ascending order) = TRUE or omitted; find an exact match = FALSE.

